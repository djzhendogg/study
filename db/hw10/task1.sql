-- 1.1.1 RegisterUser
start transaction read write isolation level read committed;
-- Косая запись - ок, т.к. не изменяем данные.
-- Фантомная запись - ок, т.к. мешают только данные с идентичными входными, в таком случае пришедший первый запишется, второй не произойдет.
-- Неповторяемое чтение - ок, т.к. изменение записей при первом прочтении не мешает.
-- read uncommitted не подходит, т.к. нужен insert, а он read-only.

-- 1.1.2. ManageFlight
start transaction read write isolation level read committed;
-- Косая запись и Фантомная запись - ок, т.к. смотрим на одну запись.
-- Неповторяемое чтение - ок, т.к. читаем только для проверки существования, далее только меняем.
-- read uncommitted не подходит, т.к. он read-only.

-- 1.2.1. FreeSeats
start transaction read write isolation level read committed;
-- Косая запись - ок, т.к. не изменяем данные.
-- Фантомная запись - ок в качестве минимальных требований, с допущением неточности 
-- в выдаче не актуальных данных пользователю, однако блокировка станиц на одну эту транзацию не привед к конфликту так как вывод - результат одного чтения.
-- Неповторяемое чтение - ок, т.к. читаем один раз.
-- read uncommitted не подходит, т.к. он read-only (в начале есть удаление неактуальных данных).

-- 1.2.2. Reserve
start transaction read write isolation level snapshot;
-- Косая запись - ок, т.к. не изменяем данные.
-- Фантомная запись - не ок, т.к. если между вызовом FreeSeats и insert появится запись другого пользователя с бронированием или покупкой этого же места,
-- то стоит со слепком.

-- 1.2.3. ExtendReservation
start transaction read write isolation level read committed;
-- Косая запись - ок, т.к. изменяем запись операясь на ее же значения.
-- Фантомная запись - ок, т.к. работаем с одной записью.
-- Неповторяемое чтение - ок, т.к. при истинно паралельных запросах обновление произойдет без отклонения по времени.
-- read uncommitted не подходит, т.к. он read-only.

-- 1.2.4. BuyFree
start transaction read write isolation level snapshot;
-- Косая запись - ок, т.к. не изменяем данные.
-- Фантомная запись - не ок, т.к. если между вызовом FreeSeats и insert появится запись другого пользователя с бронированием или покупкой этого же места,
-- то стоит со слепком.

-- 1.2.5. BuyReserved
start transaction read write isolation level read committed;
-- Косая запись - ок, т.к. изменяем запись операясь на ее же значения.
-- Фантомная запись - ок, т.к. работаем с одной записью.
-- Неповторяемое чтение - ок, т.к. при истинно паралельных запросах приведет к одному и тому же результату.
-- read uncommitted не подходит, т.к. он read-only.

-- 1.3.1. FlightsStatistics
start transaction read write isolation level read committed;
-- к сожелению имеется delete в начале, поэтому не read only.
-- Статистика динамична. 
-- Read uncommitted не подходит, т.к. 
-- 1. он read-only (в начале есть delete);
-- 2. есть пароль, избежать конфликта авторизации.

-- 1.3.2. FlightStat
start transaction read write isolation level read committed;
-- к сожелению имеется delete в начале + пишу в фиктивную таблицу, поэтому не read only.
-- Статистика динамична. 
-- Read uncommitted не подходит, т.к. 
-- 1. он read-only (в начале есть delete);
-- 2. фиктивную таблицу;
-- 3. есть пароль, избежать конфликта авторизации.

-- 1.4. CompressSeats
start transaction read write isolation level serializable;
-- Косая запись произойти не сможет, однако на мой взгляд лучше взять полную блокировку на таблицу так же для чтений.

